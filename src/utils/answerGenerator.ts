
import { EXAMPLES } from '../data/healthData';
import { Intent } from './intentClassifier';

// Language detection helper
function detectLanguage(text: string): 'english' | 'hindi' | 'tamil' {
  // Check for Tamil characters
  if (/[\u0B80-\u0BFF]/.test(text)) {
    return 'tamil';
  }
  // Check for Hindi/Devanagari characters
  if (/[\u0900-\u097F]/.test(text)) {
    return 'hindi';
  }
  // Default to English
  return 'english';
}

// Enhanced language-specific professional consultation messages
const CONSULTATION_ADVICE = {
  english: {
    nutrition: "ЁЯТб **Professional Advice**: For personalized nutrition plans, consult a registered dietitian or nutritionist who can assess your specific health conditions, dietary restrictions, and goals.",
    medicine: "тЪая╕П **Important**: Always consult your doctor or pharmacist before taking any medication. They can check for drug interactions, proper dosages, and ensure it's safe for your specific health condition.",
    emergency: "ЁЯЪи **EMERGENCY**: This requires immediate medical attention! Please contact emergency services (911/108) or visit the nearest emergency room right away. Do not delay seeking professional help.",
    general: "ЁЯй║ **Remember**: This is educational information only. For accurate diagnosis and treatment, please consult with a qualified healthcare professional who can examine you properly."
  },
  hindi: {
    nutrition: "ЁЯТб **рдкреЗрд╢реЗрд╡рд░ рд╕рд▓рд╛рд╣**: рд╡реНрдпрдХреНрддрд┐рдЧрдд рдкреЛрд╖рдг рдпреЛрдЬрдирд╛ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рдпреЛрдЧреНрдп рдкреЛрд╖рдг рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рдорд┐рд▓реЗрдВ рдЬреЛ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрдерд┐рддрд┐ рдФрд░ рдЖрд╡рд╢реНрдпрдХрддрд╛рдУрдВ рдХрд╛ рд╕рд╣реА рдЖрдХрд▓рди рдХрд░ рд╕рдХреЗред",
    medicine: "тЪая╕П **рдорд╣рддреНрд╡рдкреВрд░реНрдг**: рдХреЛрдИ рднреА рджрд╡рд╛ рд▓реЗрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рд╣рдореЗрд╢рд╛ рдбреЙрдХреНрдЯрд░ рдпрд╛ рдлрд╛рд░реНрдорд╛рд╕рд┐рд╕реНрдЯ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред рд╡реЗ рджрд╡рд╛рдУрдВ рдХреЗ рдиреБрдХрд╕рд╛рди, рд╕рд╣реА рдЦреБрд░рд╛рдХ рдФрд░ рдЖрдкрдХреА рд╕реНрдерд┐рддрд┐ рдХреЗ рд▓рд┐рдП рд╕реБрд░рдХреНрд╖рд╛ рдХреА рдЬрд╛рдВрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
    emergency: "ЁЯЪи **рдЖрдкрд╛рддрдХрд╛рд▓**: рдЗрд╕рдХреЗ рд▓рд┐рдП рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП! рдХреГрдкрдпрд╛ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ (108) рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ рдпрд╛ рддреБрд░рдВрдд рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЬрд╛рдПрдВред",
    general: "ЁЯй║ **рдпрд╛рдж рд░рдЦреЗрдВ**: рдпрд╣ рдХреЗрд╡рд▓ рд╢реИрдХреНрд╖рд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рд╣реИред рд╕рдЯреАрдХ рдирд┐рджрд╛рди рдФрд░ рдЗрд▓рд╛рдЬ рдХреЗ рд▓рд┐рдП рдХрд┐рд╕реА рдпреЛрдЧреНрдп рдЪрд┐рдХрд┐рддреНрд╕рдХ рд╕реЗ рдорд┐рд▓реЗрдВ рдЬреЛ рдЖрдкрдХреА рд╕рд╣реА рдЬрд╛рдВрдЪ рдХрд░ рд╕рдХреЗред"
  },
  tamil: {
    nutrition: "ЁЯТб **роиро┐рокрпБрогро░рпН роЖро▓рпЛроЪройрпИ**: родройро┐рокрпНрокроЯрпНроЯ роКроЯрпНроЯроЪрпНроЪродрпНродрпБ родро┐роЯрпНроЯродрпНродро┐ро▒рпНроХрпБ родроХрпБродро┐ропро╛рой роКроЯрпНроЯроЪрпНроЪродрпНродрпБ роиро┐рокрпБрогро░рпИ роЕрогрпБроХро╡рпБроорпН, роЕро╡ро░рпНроХро│рпН роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪрпБроХро╛родро╛ро░ роиро┐ро▓рпИроорпИроХро│рпИ роородро┐рокрпНрокрпАроЯрпБ роЪрпЖропрпНродрпБ роЙродро╡рпБро╡ро╛ро░рпНроХро│рпН.",
    medicine: "тЪая╕П **роорпБроХрпНроХро┐ропроорпН**: роОроирпНрод рооро░рпБроирпНродрпИропрпБроорпН роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рпБроорпН роорпБройрпН роОрокрпНрокрпЛродрпБроорпН рооро░рпБродрпНродрпБро╡ро░рпН роЕро▓рпНро▓родрпБ рооро░рпБроирпНродро╛ро│ро░рпИ роЕрогрпБроХро╡рпБроорпН. роЕро╡ро░рпНроХро│рпН рооро░рпБроирпНродрпБ родрпКроЯро░рпНрокрпБроХро│рпН, роЪро░ро┐ропро╛рой роЕро│ро╡рпБ рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХ роорпБроЯро┐ропрпБроорпН.",
    emergency: "ЁЯЪи **роЕро╡роЪро░роиро┐ро▓рпИ**: роЗродро▒рпНроХрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройро┐рокрпНрокрпБ родрпЗро╡рпИ! роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ (108) родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ роЙроЯройроЯро┐ропро╛роХ роЕро░рпБроХро┐ро▓рпБро│рпНро│ рооро░рпБродрпНродрпБро╡рооройрпИроХрпНроХрпБ роЪрпЖро▓рпНро▓рпБроЩрпНроХро│рпН.",
    general: "ЁЯй║ **роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН**: роЗродрпБ роХро▓рпНро╡ро┐ родроХро╡ро▓рпН роороЯрпНроЯрпБроорпЗ. родрпБро▓рпНро▓ро┐ропрооро╛рой роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН рооро▒рпНро▒рпБроорпН роЪро┐роХро┐роЪрпНроЪрпИроХрпНроХрпБ родроХрпБродро┐ропро╛рой роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпИ роЕрогрпБроХро╡рпБроорпН."
  }
};

// Enhanced OpenAI API call with better prompts
async function callOpenAI(question: string, intent: Intent, language: string): Promise<string> {
  const API_KEY = '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';
  
  const languageInstructions = {
    english: 'Respond in English only.',
    hindi: 'Respond in Hindi (рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВ) only.',
    tamil: 'Respond in Tamil (родрооро┐ро┤ро┐ро▓рпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН) only.'
  };

  const intentSpecificPrompts = {
    emergency: 'This is an emergency medical question. Provide immediate actionable advice while strongly emphasizing the need for emergency medical care.',
    medicine: 'This is about medication. Provide educational information but strongly emphasize consulting healthcare professionals for medication advice.',
    nutrition: 'This is about nutrition and diet. Provide helpful dietary information while recommending professional nutritionist consultation.',
    general: 'This is a general health question. Provide educational information while emphasizing professional medical consultation.'
  };

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: `You are a knowledgeable but cautious health assistant. ${languageInstructions[language]} 
                     ${intentSpecificPrompts[intent]}
                     
                     Guidelines:
                     - Provide helpful, accurate health information (тЙд200 words)
                     - Use simple, clear language
                     - Include relevant health tips when appropriate
                     - Always emphasize that this is educational information
                     - Be empathetic and supportive
                     - If it's an emergency, prioritize immediate action advice`
          },
          {
            role: 'user',
            content: question
          }
        ],
        max_tokens: 300,
        temperature: 0.3
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content.trim();
    
    // Add professional consultation advice based on language and intent
    const consultationMsg = CONSULTATION_ADVICE[language][intent];
    
    return `${aiResponse}\n\n${consultationMsg}\n\n*(AI-powered response)*`;
    
  } catch (error) {
    console.error('OpenAI API Error:', error);
    // Enhanced fallback responses
    const consultationMsg = CONSULTATION_ADVICE[language][intent];
    
    const fallbackResponses = {
      english: "I understand you have a health question. While I'd like to help, I recommend consulting with a qualified healthcare professional who can provide personalized advice based on your specific situation.",
      hindi: "рдореИрдВ рд╕рдордЭрддрд╛ рд╣реВрдВ рдХрд┐ рдЖрдкрдХрд╛ рдПрдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреНрд░рд╢реНрди рд╣реИред рдЬрдмрдХрд┐ рдореИрдВ рдорджрдж рдХрд░рдирд╛ рдЪрд╛рд╣реВрдВрдЧрд╛, рдореИрдВ рдПрдХ рдпреЛрдЧреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдиреЗ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░рддрд╛ рд╣реВрдВред",
      tamil: "роЙроЩрпНроХро│рпБроХрпНроХрпБ роТро░рпБ роЪрпБроХро╛родро╛ро░ роХрпЗро│рпНро╡ро┐ роЗро░рпБрокрпНрокродрпИ роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпНроХро┐ро▒рпЗройрпН. роиро╛ройрпН роЙродро╡ ро╡ро┐ро░рпБроорпНрокро┐ройро╛ро▓рпБроорпН, роЙроЩрпНроХро│рпН роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роиро┐ро▓рпИроорпИропро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН родройро┐рокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ ро╡ро┤роЩрпНроХроХрпНроХрпВроЯро┐роп родроХрпБродро┐ропро╛рой роЪрпБроХро╛родро╛ро░ роиро┐рокрпБрогро░рпИ роЕрогрпБроХрпБрооро╛ро▒рпБ рокро░ро┐роирпНродрпБро░рпИроХрпНроХро┐ро▒рпЗройрпН."
    };
    
    return `${fallbackResponses[language]}\n\n${consultationMsg}`;
  }
}

export async function generateAnswer(question: string, intent: Intent): Promise<string> {
  // First, try to find exact match in knowledge base
  const exactMatch = EXAMPLES.find(pair => 
    pair.q.toLowerCase() === question.toLowerCase()
  );
  
  if (exactMatch) {
    const language = detectLanguage(question);
    const consultationMsg = CONSULTATION_ADVICE[language][intent];
    return `${exactMatch.a}\n\n${consultationMsg}\n\n*(From knowledge base)*`;
  }
  
  // For new questions, use enhanced AI response
  const language = detectLanguage(question);
  return await callOpenAI(question, intent, language);
}
